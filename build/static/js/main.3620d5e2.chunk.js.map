{"version":3,"sources":["definitions/consts.js","components/card/index.js","definitions/cards.js","services/card-service.js","components/card-manager/index.js","reportWebVitals.js","index.js"],"names":["TYPES","TIERS","TIER_COLORS","Card","id","type","stats","level","tier","name","number","levelUpCard","money","tierColor","computeNextLevelNumber","Math","pow","computeLevelUpCost","className","class","style","background","JSON","stringify","hasMoney","disabled","onClick","renderLevelUpButton","generateCard","initialStats","archetype","statsProjection","ARCHETYPES","BERSERK","attack","defense","utility","baseHP","TANK","HEALTHS","OFFTANK","JOE","cardDefinitions","fetchCards","user","a","Promise","resolve","cards","map","card","definition","username","CardManager","args","nextLevelNumber","updateCost","findCard","state","setState","props","this","find","index","_drawCards","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAAaA,EACD,SADCA,EAEA,UAOAC,EACD,EADCA,EAEH,EAFGA,EAGH,EAHGA,EAIE,EAGFC,GAAW,mBACnBD,EAAe,QADI,cAEnBA,EAAa,SAFM,cAGnBA,EAAa,UAHM,cAInBA,EAAkB,QAJC,GC4DTE,MApDf,YAAiF,IAAlEC,EAAiE,EAAjEA,GAAIC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,MAC9DC,EAAYX,EAAYM,GAExBM,EAAyB,WAC3B,OAAOC,KAAKC,IAAI,EAAGT,IAGjBU,EAAqB,WACvB,OAAkC,GAA3BH,KAiBX,OACI,sBAAKI,UAAU,OAAf,UACI,qBAAKC,MAAM,YAAYC,MAAO,CAACC,WAAYR,GAA3C,SACKJ,IAEL,qBAAKU,MAAM,YAAX,SACKd,IAEL,uBACA,qBAAKc,MAAM,aAAX,SACKG,KAAKC,UAAUjB,KAEpB,uBACA,sBAAKa,MAAM,aAAX,oBACYZ,KAEZ,sBAAKY,MAAM,eAAX,UACKT,EADL,MACgBI,OAEhB,qBAAKK,MAAM,mBAAX,SAhCGL,KAA4BJ,EAGX,WACxB,IAAMc,EAAWZ,GAASK,IAE1B,OACI,wBAAQQ,UAAWD,EAAUE,QAAS,WAAOf,EAAYH,EAAMJ,EAAIU,IAA0BG,MAA7F,SACKA,MAyBeU,GAAwBV,UC/CxD,SAASW,EAAanB,EAAMJ,EAAMwB,EAAcC,EAAWtB,GACvD,MAAO,CACHC,KAAMA,EACNJ,KAAMA,EACNC,MAAOuB,EACPE,gBAAiBD,EACjBtB,KAAMA,GAKd,IAAMwB,EAAa,CACfC,QAAS,CACLC,OAAQ,EACRC,QAAS,EACTC,QAAS,GACTC,OAAQ,GAEZC,KAAM,CACFJ,OAAQ,EACRC,QAAS,EACTC,QAAS,GACTC,OAAQ,GAEZE,QAAS,CACLL,OAAQ,EACRC,QAAS,EACTC,QAAS,GACTC,OAAQ,GAEZG,QAAS,CACLN,OAAQ,EACRC,QAAS,EACTC,QAAS,GACTC,OAAQ,GAEZI,IAAK,CACDP,OAAQ,EACRC,QAAS,EACTC,QAAS,GACTC,OAAQ,IAIHK,EAAkB,CA9DpB,CACHd,EAAa,SAAU5B,EAAcgC,EAAWS,IAAKT,EAAWM,KAAMrC,IAInE,CACH2B,EAAa,QAAS5B,EAAegC,EAAWC,QAASD,EAAWQ,QAASvC,IAI1E,CACH2B,EAAa,SAAU5B,EAAcgC,EAAWC,QAASD,EAAWC,QAAShC,IAI1E,IChBJ,SAAe0C,EAAtB,kC,4CAAO,WAA0BC,GAA1B,SAAAC,EAAA,+EACIC,QAAQC,QAAQH,EAAKI,MAAMC,KAAI,SAACC,GACnC,IAAMC,EAAaT,EAAgBQ,EAAK1C,MAAM0C,EAAK9C,IAEnD,OAAO,2BACA+C,GACAD,QANR,4C,sBCEP,IAAMN,EACN,CACIQ,SAAU,OACVJ,MAAO,CACH,CAAC5C,GAAI,EAAGI,KAAM,EAAGD,MAAO,EAAGG,OAAQ,GACnC,CAACN,GAAI,EAAGI,KAAM,EAAGD,MAAO,EAAGG,OAAQ,GACnC,CAACN,GAAI,EAAGI,KAAM,EAAGD,MAAO,EAAGG,OAAQ,IAEvCE,MAAO,MAgEIyC,E,kDA3DX,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACjB,+BAASA,KAqBb3C,YAAc,SAACH,EAAMJ,EAAImD,EAAiBC,GACtC,IAAMN,EAAO,EAAKO,SAASjD,EAAMJ,EAAI,EAAKsD,MAAMV,OAEhDE,EAAK3C,QACL2C,EAAKxC,QAAU6C,EAEf,EAAKI,SAAS,CACV/C,MAAO,EAAK8C,MAAM9C,MAAQ4C,KA1B9B,EAAKE,MAAQ,CACTV,MAAO,GACPpC,MAAO,EACPwC,SAAU,IANG,E,uGAUGQ,G,6EACpBC,K,KACcjB,EAAKQ,S,KACRR,EAAKhC,M,SACC+B,EAAWC,G,yBAFxBQ,S,KACAxC,M,KACAoC,M,WAHCW,S,sJAOAnD,EAAMJ,EAAI4C,GACf,OAAOA,EAAMc,MAAK,SAAAZ,GAAI,OAAIA,EAAK1C,OAASA,GAAQ0C,EAAK9C,KAAOA,O,mCAclD,IAAD,OACT,OAAOyD,KAAKH,MAAMV,MAAMC,KAAI,SAACC,EAAMa,GAC/B,OAAO,cAAC,EAAD,2BAAUb,GAAV,IAAgBtC,MAAO,EAAK8C,MAAM9C,MAAOD,YAAa,EAAKA,YAAaD,OAAQqD,EAAQ,U,+BAI7F,IAAD,SACuBF,KAAKH,MAAzB9C,EADH,EACGA,MAAOwC,EADV,EACUA,SAEf,OACI,gCACI,oCACI,2CAAcxC,KACd,2CAAcwC,KACd,wBAAQ1B,QAAU,WAAQ,EAAKiC,SAAS,CAAC/C,MAAOA,EAAQ,OAAxD,0BAIJ,8BACKiD,KAAKG,sB,GAtDAC,IAAMC,WCJjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3620d5e2.chunk.js","sourcesContent":["export const TYPES = {\r\n    ATTACK: 'attack',\r\n    DEFENSE: 'defense'\r\n};\r\n\r\nexport const UTILITIES = {\r\n    REGENERATION: 'regeneration'\r\n};\r\n\r\nexport const TIERS = {\r\n    COMMON: 0,\r\n    RARE: 1,\r\n    EPIC: 2,\r\n    LEGENDARY: 3\r\n};\r\n\r\nexport const TIER_COLORS = {\r\n    [TIERS.COMMON]: 'gray',\r\n    [TIERS.RARE]: 'green',\r\n    [TIERS.EPIC]: 'purple',\r\n    [TIERS.LEGENDARY]: 'gold'\r\n}","import './card.css';\r\nimport { TIER_COLORS } from '../../definitions/consts';\r\n\r\n/*\r\n {\r\n        name: name,\r\n        type: type,\r\n        stats: {\r\n            attack: 1,\r\n            defense: 1,\r\n            utility: [UTILITIES.REGENERATION],\r\n            baseHP: 5\r\n        },\r\n        statsProjection: {\r\n            attack: 3,\r\n            defense: 2,\r\n            utility: [],\r\n            baseHP: 1\r\n        },\r\n        tier: tier,\r\n        level: 1\r\n    }\r\n*/\r\n\r\nfunction Card({id, type, stats, level, tier, name, number, levelUpCard, money}) {\r\n    const tierColor = TIER_COLORS[tier];\r\n\r\n    const computeNextLevelNumber = () => {\r\n        return Math.pow(2, level);\r\n    };\r\n\r\n    const computeLevelUpCost = () => {\r\n        return computeNextLevelNumber() * 50;\r\n    };\r\n\r\n    const canLevelUp = () => {\r\n        return computeNextLevelNumber() <= number;\r\n    };\r\n\r\n    const renderLevelUpButton = () => {\r\n        const hasMoney = money >= computeLevelUpCost();\r\n\r\n        return (\r\n            <button disabled={!hasMoney} onClick={() => {levelUpCard(tier, id, computeNextLevelNumber(), computeLevelUpCost())}} >\r\n                {computeLevelUpCost()}\r\n            </button>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <div class=\"Card-name\" style={{background: tierColor}}>\r\n                {name}\r\n            </div>\r\n            <div class=\"Card-type\">\r\n                {type}\r\n            </div>\r\n            <br/>\r\n            <div class=\"Card-stats\">\r\n                {JSON.stringify(stats)}\r\n            </div>\r\n            <br/>\r\n            <div class=\"Card-level\">\r\n                Level: {level}\r\n            </div>\r\n            <div class=\"Card-levelup\">\r\n                {number} / {computeNextLevelNumber()}\r\n            </div>\r\n            <div class=\"Card-levelUpCost\">\r\n                {canLevelUp() ? renderLevelUpButton() : computeLevelUpCost()}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import { TYPES, TIERS } from './consts';\r\n\r\n\r\nfunction generateCommonCards() {\r\n    return [\r\n        generateCard('Miguel', TYPES.ATTACK, ARCHETYPES.JOE, ARCHETYPES.TANK, TIERS.COMMON)\r\n    ];\r\n}\r\nfunction generateRareCards() {\r\n    return [\r\n        generateCard('Goirs', TYPES.DEFENSE, ARCHETYPES.BERSERK, ARCHETYPES.OFFTANK, TIERS.RARE)\r\n    ];\r\n}\r\nfunction generateEpicCards() {\r\n    return [\r\n        generateCard('Gornak', TYPES.ATTACK, ARCHETYPES.BERSERK, ARCHETYPES.BERSERK, TIERS.EPIC)\r\n    ];\r\n}\r\nfunction generateLegendaryCards() {\r\n    return [];\r\n}\r\n\r\nfunction generateCard(name, type, initialStats, archetype, tier) {\r\n    return {\r\n        name: name,\r\n        type: type,\r\n        stats: initialStats,\r\n        statsProjection: archetype,\r\n        tier: tier\r\n    }\r\n}\r\n\r\n// 10 Points to spend\r\nconst ARCHETYPES = {\r\n    BERSERK: {\r\n        attack: 6,\r\n        defense: 2,\r\n        utility: [],\r\n        baseHP: 2\r\n    },\r\n    TANK: {\r\n        attack: 2,\r\n        defense: 6,\r\n        utility: [],\r\n        baseHP: 2\r\n    },\r\n    HEALTHS: {\r\n        attack: 2,\r\n        defense: 2,\r\n        utility: [],\r\n        baseHP: 6\r\n    },\r\n    OFFTANK: {\r\n        attack: 4,\r\n        defense: 2,\r\n        utility: [],\r\n        baseHP: 4\r\n    },\r\n    JOE: {\r\n        attack: 3,\r\n        defense: 3,\r\n        utility: [],\r\n        baseHP: 4\r\n    }\r\n}\r\n\r\nexport const cardDefinitions = [\r\n    generateCommonCards(),\r\n    generateRareCards(),\r\n    generateEpicCards(),\r\n    generateLegendaryCards()\r\n];\r\n","import { cardDefinitions } from '../definitions/cards';\r\n\r\n\r\nexport async function fetchCards(user) {\r\n    return Promise.resolve(user.cards.map((card) => {\r\n        const definition = cardDefinitions[card.tier][card.id];\r\n\r\n        return {\r\n            ...definition,\r\n            ...card\r\n        }\r\n    }));\r\n}","import React from 'react';\r\nimport './card-manager.css';\r\nimport Card from '../card';\r\nimport { fetchCards } from '../../services/card-service';\r\n\r\nconst user = \r\n{\r\n    username: 'mike',\r\n    cards: [\r\n        {id: 0, tier: 0, level: 2, number: 0},\r\n        {id: 0, tier: 1, level: 1, number: 1},\r\n        {id: 0, tier: 2, level: 4, number: 2}\r\n    ],\r\n    money: 3024\r\n};\r\n\r\nclass CardManager extends React.Component {\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        this.state = {\r\n            cards: [],\r\n            money: 0,\r\n            username: ''\r\n        };\r\n    }\r\n\r\n    async componentDidMount(props) {\r\n        this.setState({\r\n            username: user.username,\r\n            money: user.money,\r\n            cards: await fetchCards(user)\r\n        });\r\n    }\r\n\r\n    findCard(tier, id, cards) {\r\n        return cards.find(card => card.tier === tier && card.id === id);\r\n    }\r\n\r\n    levelUpCard = (tier, id, nextLevelNumber, updateCost) => {\r\n        const card = this.findCard(tier, id, this.state.cards);\r\n\r\n        card.level++;\r\n        card.number -= nextLevelNumber;\r\n\r\n        this.setState({\r\n            money: this.state.money - updateCost\r\n        });\r\n    }\r\n\r\n    _drawCards() {\r\n        return this.state.cards.map((card, index) => {\r\n            return <Card {...card} money={this.state.money} levelUpCard={this.levelUpCard} number={index + 1} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { money, username } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <section>\r\n                    <span>Money: {money}</span>\r\n                    <span> User: {username}</span>\r\n                    <button onClick= {() => { this.setState({money: money + 100}) }} >\r\n                        Add money\r\n                    </button>\r\n                </section>\r\n                <div>\r\n                    {this._drawCards()}\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default CardManager;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CardManager from './components/card-manager';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardManager />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}